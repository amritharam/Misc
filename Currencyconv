<!DOCTYPE html>
<meta charset="utf-8">
<html>
<body>
<p> Select Starting Currency: </p>

<script>
dropDown();
function dropDown() {
    var x = document.createElement("SELECT");
    x.setAttribute("id", "mySel");
    document.body.appendChild(x);
    var list= ["Dollar","Rupee","Euro","Yen"];
    for (var x in list) {
        var z = document.createElement("option");
        z.setAttribute("value", list[x]);
        var t = document.createTextNode(list[x]);
        z.appendChild(t);
        document.getElementById("mySel").appendChild(z);
    }
}

</script>
<button onclick="runScript();"> OK </button>
<br/>

<body/>

<svg class="tree"></svg>
<script src="http://d3js.org/d3.v3.min.js"></script>

<script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>
<style>
.d3-tip {
    line-height: 1;
    font-weight: normal;
    font-family: 'Trebuchet MS', 'Lucida Grande', 'Lucida Sans Unicode', 'Lucida Sans', Tahoma, sans-serif;
    padding: 12px;
    background: rgba(0, 0, 0, 0.8);
    color: #fff;
    border-radius: 2px;
}
.d3-tip:after {
  box-sizing: border-box;
  display: inline;
  font-size: 10px;
  width: 100%;
  line-height: 1;
  color: rgba(0, 0, 0, 0.8);
  content: "\25BC";
  position: relative;
  bottom:-20px;
  left: -34%;
  text-align: center;
}
</style>

<script>

function runScript() {
var tree=d3.select(".tree")
    .attr("width",1900)
    .attr("height",1600)
    .append("svg")
    .attr("width",1900)
    .attr("height",1600)
    .append("g");

var currencies = [];
var pi = Math.PI;

var shadesRed = ["#FF8C8C","#FF5E5E","#FF3030","#E61616"];

var shadesBlue = ["#4D94DB","#1975D1", "#0052A3", "#002952"];
//lightest, med1, med2, darkest
var dollarConv =[]; //to store all the conversion values in so we can sort them.
var barColorsRed = {}; //to store the currency and its corresponding color
var barColorsBlue = {};

var tip = d3.tip()
    .attr('class','d3-tip')
    .offset([5,-10]);
tree.call(tip);

var neg = [];
var pos = [];

d3.tsv("conversionmultiple.tsv", type, function(data) {
    for (i=0;i<data.length;i++) {
        var svg;
        if (currencies.indexOf(data[i].base_currency) < 0) { //if we haven't created the currency's image yet
        svg = d3.select("body").append("svg");
        currencies.push(data[i].base_currency);
        svg
            .append('defs')
            .append('pattern')
                .attr('id', data[i].base_currency)
                .attr('width',20)
                .attr('height',20)
            .append('svg:image')
                .attr('xlink:href', data[i].base_currency +".jpg")
                    .attr("width",75)
                    .attr("height",75)
                    .attr("x",-1)
                    .attr("y",0);

    }
    if (data[i].base_currency === "Dollar") {
        dollarConv.push(data[i]); //just getting the dollar to everything else conversions.
    }

    if(data[i].conversion >= 1) {
        pos.push(data[i].conversion);
    } else {
        neg.push(data[i].conversion);
    }
}
pos.sort();
neg.sort();

dollarConv.push({"base_currency":"Dollar", "to_currency":"Dollar","conversion":1});
dollarConv.sort(function(a,b) {
    return b.conversion-a.conversion;
}) //trying to sort the conversions from least value to most value.
//This is done for the purpose of coloring the bars according to value
var i = 0;

for(var obj in dollarConv) { 
    barColorsRed[dollarConv[obj].to_currency] = shadesRed[i]; //a mapping of currency to color
    barColorsBlue[dollarConv[obj].to_currency] = shadesBlue[i++];
}


var labelCount = 0; //to give each arc its unique id so that we can label them correctly.
var expanded = []; //keep a track of already expanded currencies otherwise we'll have an infinite tree.
//var curExpansion = 0; //this is to differentiate each instance of the same currency. otherwise, while drawing the arcs, it would retrieve the initial instance of that currency rather than the one last drawn. *NO LONGER NEEDED. ONLY ONE EXPANSION PER CURRENCY*

var selObj = document.getElementById("mySel");
var initialCurr = selObj.options[selObj.selectedIndex].value;

expand(initialCurr,50,360); //always start off with Dollar by default.
function expand(base,xcord,ycord) { //takes in currency to expand as well as starting x and y coordinates.
    //if (expanded.indexOf(base) < 0) { //ensure that it hasn't been expanded before
        expanded.push(base);
        tree.append("circle")
            .attr("class","icon")
            .attr("id",base)
            .attr("cx", xcord)
            .attr("cy", ycord)
            .attr("hasChildExpanded","false")
            .attr("r",40)
            .style("fill", 'url(#'+base+')');

    var arcCount=0;
    for(i=0;i<data.length;i++) {
     if (data[i].base_currency === base) {
        var obj = data[i];
        tree.append("path")
        .attr("d", d3.svg.arc()
            .innerRadius(48) 
            .outerRadius(getOuterRadius(data[i].conversion))
            .startAngle(45 * (pi/180) + arcCount/1.8) //converting from degs to radians
            .endAngle(1+arcCount++/1.8))
        .attr("id","path"+labelCount)
        .attr("fill", function() { 
            if (data[i].conversion >= 1)
               return barColorsRed[data[i].to_currency]; 
            return barColorsBlue[data[i].to_currency];
        })
        .attr("transform","translate("+(+d3.select("#"+base).attr("cx") -15)+","+(+d3.select("#"+base).attr("cy"))+")")
        .on('mouseover', callShow(obj))
        .on('mouseout', tip.hide)
        .on("click", callback(obj,arcCount)); //get the name of the currency bar you clicked and expand it.
        var arctext = tree.append("text")
            .attr("x",(4/3*(arcCount)))
            .attr("dy","1em");
            //.attr("transform","rotate("+(180*arcCount)+")");

        arctext.append("textPath")
            .attr("xlink:href","#path"+labelCount++)
            .style("fill", "#FFFFFF")
            .style("font-family","Trebuchet MS")
           // .style("alignment-baseline","auto")
            .text(function() { 
                switch(data[i].to_currency) {
                    case "Dollar":
                        return "$";
                    case "Euro":
                        return "€";
                    case "Rupee":
                        return "Rup";
                    case "Yen":
                        return "¥";
                    }
                });   
        }
    }
    function callback(obj, arcCount) {
        return function() {
            var c = getOuterRadius(obj.conversion);
            //the x and y coords of currency to be expanded is going to depend on the length of the arc clicked on. 

            var startRad = 45*(pi/180) + (arcCount-1)/2;
            var endRad = 1+arcCount/2;
            var midAngle = 57.2957795*(startRad+endRad)/2;
            // if(arcCount == 1) {
            //     expand(obj.to_currency, +d3.select("#"+obj.base_currency).attr("cx")+c/1.15, +d3.select("#"+obj.base_currency).attr("cy")-c+c/3.8);
            // } else if (arcCount == 2) {
            //     expand(obj.to_currency, +d3.select("#"+obj.base_currency).attr("cx")+c+20, +d3.select("#"+obj.base_currency).attr("cy")-c+c/1.3);
            // } else if(arcCount == 3) {
            //     expand(obj.to_currency, +d3.select("#"+obj.base_currency).attr("cx")+c+18, +d3.select("#"+obj.base_currency).attr("cy")+c/2.65);
            // }
            if ((d3.select("#"+obj.base_currency).attr("hasChildExpanded"))==="false" && expanded.indexOf(obj.to_currency) < 0) {
                d3.select("#"+obj.base_currency).attr("hasChildExpanded","true"); 
                // if (arcCount == 2) {
                // expand(obj.to_currency, +d3.select("#"+obj.base_currency).attr("cx")+Math.abs((c+25)*Math.cos(midAngle)), +d3.select("#"+obj.base_currency).attr("cy")+c*Math.sin(midAngle));
                // }
                // else {
                //expand(obj.to_currency, +d3.select("#"+obj.base_currency).attr("cx")+Math.abs(((c+4*arcCount)*Math.cos(midAngle))), +d3.select("#"+obj.base_currency).attr("cy")-(c+30*(arcCount-1))*1.6*Math.sin(midAngle));
                // }
                expand(obj.to_currency, +d3.select("#"+obj.base_currency).attr("cx")+Math.abs((c+20)*Math.cos(midAngle)), +d3.select("#"+obj.base_currency).attr("cy")-(c+75)*Math.sin(midAngle));
            }
            d3.event.stopPropagation();
         }
    }

    function callShow(obj) {
        return function() {
            tip.html("<strong>1 "+obj.base_currency+" = "+obj.conversion + " " + obj.to_currency+"s<strong>");
            tip.show();
        }
    }

    function getOuterRadius(c) { //to "scale" each bar based on the conversion factor.
               //  if (c < 0.1) {
               //      return c*11000
               //  } else if (c<0.6) {
               //      return c*275;
               //  } else if(c<10) {
               //      return c*100;
               //  }
               // return c*3; 
               if (c >= 1) {
                    //scale pos
                    var norm = (c-pos[0])/(pos[pos.length-1]-pos[0]);
                    return (200-100)*norm+100;
               } else {
                    var norm = (c-neg[0]/(neg[neg.length-1]-neg[0]));
                    return (200-100)*norm + 100;
               }

             }
        }
    //}
});



function type(d) {
	d.conversion = +d.conversion;
	return d;
}
}

</script>



</html>
